/* Generated By:JavaCC: Do not edit this line. BlockBuilder.java */
package cs524BlockBuilder;
import cs524BlockBuilder.Block;

public class BlockBuilder implements BlockBuilderConstants {
  public String fileIn;

  public String fileOut;
  BlockBuilder(String fileIn, String fileOut)
  {
    this.fileIn = fileIn;
    this.fileOut = fileOut;
  }

  public static void main(String args []) throws ParseException
  {
    if (args.length < 2)
    {
      throw new RuntimeException("not enough arguments");
    }
    try
    {
      BlockBuilder compiler = new BlockBuilder(args [1], args [2]);
      compiler.parse();
      //Block.printXML(a, args [2]);
      //Block.exportToGnuplot(a, Triple(0, 0, 0));
    }
    catch (Throwable e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
    }
  }

  final public void parse() throws ParseException {
  Block a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(DEFINE);
      jj_consume_token(ASSIGN);
      a = define();
      jj_consume_token(SEMICOLON);
      Block.printXML(a, this.fileOut);
      Block.exportToGnuplot(a, new Triple(0, 0, 0));
    }
    jj_consume_token(0);
  }

  final public Block define() throws ParseException {
  Block a = new Block();
  Block b = new Block();
  Triple volume = new Triple();
  Triple socket = new Triple();
  Triple ball = new Triple();
  String id = "";
    jj_consume_token(LPAREN);
    jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    jj_consume_token(DQUOTE);
    id = token.image;
    jj_consume_token(DQUOTE);
    jj_consume_token(VOLUME);
    jj_consume_token(ASSIGN);
    volume = getTriple();
    jj_consume_token(SOCKET);
    jj_consume_token(ASSIGN);
    socket = getTriple();
    a = new Block(id, volume, socket);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONNECT:
      jj_consume_token(CONNECT);
      jj_consume_token(LPAREN);
      b = define();
      a.connectsTo(b);
      jj_consume_token(BALL);
      ball = getTriple();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Triple getTriple() throws ParseException {
  double x;
  double y;
  double z;
    jj_consume_token(LBRACKET);
    x = Double.parseDouble(token.image);
    jj_consume_token(COMMA);
    y = Double.parseDouble(token.image);
    jj_consume_token(COMMA);
    z = Double.parseDouble(token.image);
    jj_consume_token(RBRACKET);
    {if (true) return new Triple(x, y, z);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public BlockBuilderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x1000000,};
   }

  /** Constructor with InputStream. */
  public BlockBuilder(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BlockBuilder(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BlockBuilderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BlockBuilder(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BlockBuilderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BlockBuilder(BlockBuilderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BlockBuilderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
